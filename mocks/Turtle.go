// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	image "image"
	color "image/color"

	mock "github.com/stretchr/testify/mock"
)

// Turtle is an autogenerated mock type for the Turtle type
type Turtle struct {
	mock.Mock
}

// B provides a mock function with given fields: distance
func (_m *Turtle) B(distance float64) {
	_m.Called(distance)
}

// Backward provides a mock function with given fields: distance
func (_m *Turtle) Backward(distance float64) {
	_m.Called(distance)
}

// Circle provides a mock function with given fields: radius, angleAmountToDraw, steps
func (_m *Turtle) Circle(radius float64, angleAmountToDraw float64, steps int) {
	_m.Called(radius, angleAmountToDraw, steps)
}

// EnableCompassAngleMode provides a mock function with given fields: in
func (_m *Turtle) EnableCompassAngleMode(in bool) {
	_m.Called(in)
}

// F provides a mock function with given fields: distance
func (_m *Turtle) F(distance float64) {
	_m.Called(distance)
}

// Fill provides a mock function with given fields: c
func (_m *Turtle) Fill(c color.RGBA) {
	_m.Called(c)
}

// Forward provides a mock function with given fields: distance
func (_m *Turtle) Forward(distance float64) {
	_m.Called(distance)
}

// GetAngle provides a mock function with given fields:
func (_m *Turtle) GetAngle() float64 {
	ret := _m.Called()

	var r0 float64
	if rf, ok := ret.Get(0).(func() float64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(float64)
	}

	return r0
}

// GetPos provides a mock function with given fields:
func (_m *Turtle) GetPos() (float64, float64) {
	ret := _m.Called()

	var r0 float64
	var r1 float64
	if rf, ok := ret.Get(0).(func() (float64, float64)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() float64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func() float64); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(float64)
	}

	return r0, r1
}

// GoTo provides a mock function with given fields: x, y
func (_m *Turtle) GoTo(x float64, y float64) {
	_m.Called(x, y)
}

// L provides a mock function with given fields: angle
func (_m *Turtle) L(angle float64) {
	_m.Called(angle)
}

// Left provides a mock function with given fields: angle
func (_m *Turtle) Left(angle float64) {
	_m.Called(angle)
}

// Off provides a mock function with given fields:
func (_m *Turtle) Off() {
	_m.Called()
}

// On provides a mock function with given fields:
func (_m *Turtle) On() {
	_m.Called()
}

// PD provides a mock function with given fields:
func (_m *Turtle) PD() {
	_m.Called()
}

// PU provides a mock function with given fields:
func (_m *Turtle) PU() {
	_m.Called()
}

// PaintDot provides a mock function with given fields: size
func (_m *Turtle) PaintDot(size float64) {
	_m.Called(size)
}

// PanL provides a mock function with given fields: distance
func (_m *Turtle) PanL(distance float64) {
	_m.Called(distance)
}

// PanLeftward provides a mock function with given fields: distance
func (_m *Turtle) PanLeftward(distance float64) {
	_m.Called(distance)
}

// PanR provides a mock function with given fields: distance
func (_m *Turtle) PanR(distance float64) {
	_m.Called(distance)
}

// PanRightward provides a mock function with given fields: distance
func (_m *Turtle) PanRightward(distance float64) {
	_m.Called(distance)
}

// PenColor provides a mock function with given fields: c
func (_m *Turtle) PenColor(c color.RGBA) {
	_m.Called(c)
}

// PenDown provides a mock function with given fields:
func (_m *Turtle) PenDown() {
	_m.Called()
}

// PenSize provides a mock function with given fields: size
func (_m *Turtle) PenSize(size float64) {
	_m.Called(size)
}

// PenUp provides a mock function with given fields:
func (_m *Turtle) PenUp() {
	_m.Called()
}

// PointToward provides a mock function with given fields: x, y
func (_m *Turtle) PointToward(x float64, y float64) {
	_m.Called(x, y)
}

// R provides a mock function with given fields: angle
func (_m *Turtle) R(angle float64) {
	_m.Called(angle)
}

// Right provides a mock function with given fields: angle
func (_m *Turtle) Right(angle float64) {
	_m.Called(angle)
}

// SetAngle provides a mock function with given fields: angle
func (_m *Turtle) SetAngle(angle float64) {
	_m.Called(angle)
}

// SetDegreesMode provides a mock function with given fields:
func (_m *Turtle) SetDegreesMode() {
	_m.Called()
}

// SetRadianMode provides a mock function with given fields:
func (_m *Turtle) SetRadianMode() {
	_m.Called()
}

// SetShapeAsArrow provides a mock function with given fields:
func (_m *Turtle) SetShapeAsArrow() {
	_m.Called()
}

// SetShapeAsImage provides a mock function with given fields: in
func (_m *Turtle) SetShapeAsImage(in image.Image) {
	_m.Called(in)
}

// SetShapeAsTurtle provides a mock function with given fields:
func (_m *Turtle) SetShapeAsTurtle() {
	_m.Called()
}

// SetShapeScale provides a mock function with given fields: scale
func (_m *Turtle) SetShapeScale(scale float64) {
	_m.Called(scale)
}

// SetSpeed provides a mock function with given fields: PixelsPerSecond
func (_m *Turtle) SetSpeed(PixelsPerSecond float64) {
	_m.Called(PixelsPerSecond)
}

// SetVisible provides a mock function with given fields: isVisible
func (_m *Turtle) SetVisible(isVisible bool) {
	_m.Called(isVisible)
}

type mockConstructorTestingTNewTurtle interface {
	mock.TestingT
	Cleanup(func())
}

// NewTurtle creates a new instance of Turtle. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTurtle(t mockConstructorTestingTNewTurtle) *Turtle {
	mock := &Turtle{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
