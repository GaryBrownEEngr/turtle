// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	image "image"
	color "image/color"

	mock "github.com/stretchr/testify/mock"

	turtlemodel "github.com/GaryBrownEEngr/turtle/turtlemodel"
)

// Turtle is an autogenerated mock type for the Turtle type
type Turtle struct {
	mock.Mock
}

// Angle provides a mock function with given fields: angle
func (_m *Turtle) Angle(angle float64) {
	_m.Called(angle)
}

// B provides a mock function with given fields: distance
func (_m *Turtle) B(distance float64) {
	_m.Called(distance)
}

// Backward provides a mock function with given fields: distance
func (_m *Turtle) Backward(distance float64) {
	_m.Called(distance)
}

// Circle provides a mock function with given fields: radius, angleAmountToDraw, steps
func (_m *Turtle) Circle(radius float64, angleAmountToDraw float64, steps int) {
	_m.Called(radius, angleAmountToDraw, steps)
}

// Color provides a mock function with given fields: c
func (_m *Turtle) Color(c color.Color) {
	_m.Called(c)
}

// CompassMode provides a mock function with given fields:
func (_m *Turtle) CompassMode() {
	_m.Called()
}

// DegreesMode provides a mock function with given fields:
func (_m *Turtle) DegreesMode() {
	_m.Called()
}

// Dot provides a mock function with given fields: size
func (_m *Turtle) Dot(size float64) {
	_m.Called(size)
}

// F provides a mock function with given fields: distance
func (_m *Turtle) F(distance float64) {
	_m.Called(distance)
}

// Fill provides a mock function with given fields: c
func (_m *Turtle) Fill(c color.Color) {
	_m.Called(c)
}

// Forward provides a mock function with given fields: distance
func (_m *Turtle) Forward(distance float64) {
	_m.Called(distance)
}

// GetAngle provides a mock function with given fields:
func (_m *Turtle) GetAngle() float64 {
	ret := _m.Called()

	var r0 float64
	if rf, ok := ret.Get(0).(func() float64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(float64)
	}

	return r0
}

// GetAngleMode provides a mock function with given fields:
func (_m *Turtle) GetAngleMode() turtlemodel.AngleMode {
	ret := _m.Called()

	var r0 turtlemodel.AngleMode
	if rf, ok := ret.Get(0).(func() turtlemodel.AngleMode); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(turtlemodel.AngleMode)
	}

	return r0
}

// GetColor provides a mock function with given fields:
func (_m *Turtle) GetColor() color.Color {
	ret := _m.Called()

	var r0 color.Color
	if rf, ok := ret.Get(0).(func() color.Color); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(color.Color)
		}
	}

	return r0
}

// GetPos provides a mock function with given fields:
func (_m *Turtle) GetPos() (float64, float64) {
	ret := _m.Called()

	var r0 float64
	var r1 float64
	if rf, ok := ret.Get(0).(func() (float64, float64)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() float64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func() float64); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(float64)
	}

	return r0, r1
}

// GetSize provides a mock function with given fields:
func (_m *Turtle) GetSize() float64 {
	ret := _m.Called()

	var r0 float64
	if rf, ok := ret.Get(0).(func() float64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(float64)
	}

	return r0
}

// GetSpeed provides a mock function with given fields:
func (_m *Turtle) GetSpeed() float64 {
	ret := _m.Called()

	var r0 float64
	if rf, ok := ret.Get(0).(func() float64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(float64)
	}

	return r0
}

// GoTo provides a mock function with given fields: x, y
func (_m *Turtle) GoTo(x float64, y float64) {
	_m.Called(x, y)
}

// HideTurtle provides a mock function with given fields:
func (_m *Turtle) HideTurtle() {
	_m.Called()
}

// IsPenDown provides a mock function with given fields:
func (_m *Turtle) IsPenDown() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// L provides a mock function with given fields: angle
func (_m *Turtle) L(angle float64) {
	_m.Called(angle)
}

// Left provides a mock function with given fields: angle
func (_m *Turtle) Left(angle float64) {
	_m.Called(angle)
}

// Off provides a mock function with given fields:
func (_m *Turtle) Off() {
	_m.Called()
}

// On provides a mock function with given fields:
func (_m *Turtle) On() {
	_m.Called()
}

// PD provides a mock function with given fields:
func (_m *Turtle) PD() {
	_m.Called()
}

// PU provides a mock function with given fields:
func (_m *Turtle) PU() {
	_m.Called()
}

// PanL provides a mock function with given fields: distance
func (_m *Turtle) PanL(distance float64) {
	_m.Called(distance)
}

// PanLeftward provides a mock function with given fields: distance
func (_m *Turtle) PanLeftward(distance float64) {
	_m.Called(distance)
}

// PanR provides a mock function with given fields: distance
func (_m *Turtle) PanR(distance float64) {
	_m.Called(distance)
}

// PanRightward provides a mock function with given fields: distance
func (_m *Turtle) PanRightward(distance float64) {
	_m.Called(distance)
}

// PenDown provides a mock function with given fields:
func (_m *Turtle) PenDown() {
	_m.Called()
}

// PenUp provides a mock function with given fields:
func (_m *Turtle) PenUp() {
	_m.Called()
}

// PointToward provides a mock function with given fields: x, y
func (_m *Turtle) PointToward(x float64, y float64) {
	_m.Called(x, y)
}

// R provides a mock function with given fields: angle
func (_m *Turtle) R(angle float64) {
	_m.Called(angle)
}

// RadiansMode provides a mock function with given fields:
func (_m *Turtle) RadiansMode() {
	_m.Called()
}

// Right provides a mock function with given fields: angle
func (_m *Turtle) Right(angle float64) {
	_m.Called(angle)
}

// ShapeAsArrow provides a mock function with given fields:
func (_m *Turtle) ShapeAsArrow() {
	_m.Called()
}

// ShapeAsImage provides a mock function with given fields: in
func (_m *Turtle) ShapeAsImage(in image.Image) {
	_m.Called(in)
}

// ShapeAsTurtle provides a mock function with given fields:
func (_m *Turtle) ShapeAsTurtle() {
	_m.Called()
}

// ShapeScale provides a mock function with given fields: scale
func (_m *Turtle) ShapeScale(scale float64) {
	_m.Called(scale)
}

// ShowTurtle provides a mock function with given fields:
func (_m *Turtle) ShowTurtle() {
	_m.Called()
}

// Size provides a mock function with given fields: size
func (_m *Turtle) Size(size float64) {
	_m.Called(size)
}

// Speed provides a mock function with given fields: PixelsPerSecond
func (_m *Turtle) Speed(PixelsPerSecond float64) {
	_m.Called(PixelsPerSecond)
}

// NewTurtle creates a new instance of Turtle. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTurtle(t interface {
	mock.TestingT
	Cleanup(func())
}) *Turtle {
	mock := &Turtle{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
